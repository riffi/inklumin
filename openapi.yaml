openapi: 3.0.0
info:
  title: InkLumin API
  version: "1.0"
  description: |
    REST API for authentication, book management and user configuration.
servers:
  - url: http://localhost:8080
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/auth/validate:
    get:
      summary: Validate JWT token
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Valid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/auth/healthcheck:
    get:
      summary: API health check
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/books:
    post:
      summary: Save book data
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveBookRequest'
      responses:
        '200':
          description: Book saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Server error while saving book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      summary: Get list of user books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Server error while retrieving books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/books/{uuid}:
    get:
      summary: Get book data
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Server error while retrieving book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/user/config-data:
    post:
      summary: Save user config data
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveConfigDataRequest'
      responses:
        '200':
          description: Config saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error or bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Server error while saving configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    get:
      summary: Get user config data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Config retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Config data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Server error while retrieving configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          nullable: true
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        displayName:
          type: string
      required:
        - username
        - password
        - confirmPassword
        - displayName
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        type:
          type: string
        username:
          type: string
        displayName:
          type: string
        userId:
          type: integer
          format: int64
    SaveBookRequest:
      type: object
      properties:
        uuid:
          type: string
        bookTitle:
          type: string
        bookData:
          type: string
        kind:
          type: string
      required:
        - uuid
        - bookTitle
        - bookData
    BookResponse:
      type: object
      properties:
        uuid:
          type: string
        bookTitle:
          type: string
        bookData:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    BookShortInfo:
      type: object
      properties:
        uuid:
          type: string
        bookTitle:
          type: string
        kind:
          type: string
        updatedAt:
          type: string
          format: date-time
    SaveConfigDataRequest:
      type: object
      properties:
        configData:
          type: string
      required:
        - configData
    ConfigDataResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        configData:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
